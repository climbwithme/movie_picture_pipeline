name: Backend Continuous Deployment

on:
  # Triggers workflow manually or on pull request events
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      # Runs only when code in the backend directory changes
      - starter/backend/**

env:
  REPOSITORY: backend
  IMAGE_TAG: ${{ github.sha }}


jobs:
  # Linting job: ensures the code adheres to ESLint rules
  Linting:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies using pipenv
      - name: Install Dependencies
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      # Step 4: Run linting
      - name: Run Lint
        working-directory: starter/backend
        run: |
          pipenv run lint

  # Test job: runs the test suite and ensures all tests pass
  Test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Use Python 3
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies using pipenv
      - name: Install Dependencies
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      # Step 4: Run tests
      - name: Run Tests
        working-directory: starter/backend
        run: pipenv run test

  # Build job: builds the Docker image if linting and tests succeed
  Build:
    needs: [Linting, Test] # This job only runs if both Linting and Test jobs pass
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository to get the latest code
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials for the current session
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Login to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build the Docker image and push it to ECR
      - name: Build & Push docker image with SHA
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        working-directory: starter/backend
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  Deploy:
    needs: Build # This job runs only after the Build job completes successfully
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository to get the latest code for deployment
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials for the current session
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Login to Amazon ECR to access the Docker images
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Update kubeconfig to interact with the EKS cluster
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1

      # Step 5: Set the image tag in Kubernetes manifests using kustomize
      - name: Set image tag to newer version
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        working-directory: starter/backend/k8s
        run: kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6: Deploy the updated application to the EKS cluster
      - name: Deploy application to EKS cluster
        working-directory: starter/backend/k8s
        run: kustomize build | kubectl apply -f -
