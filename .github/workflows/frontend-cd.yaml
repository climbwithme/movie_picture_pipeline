name: Frontend Continuous Deployment

# Workflow triggers
on:
  # Allows the workflow to be triggered manually
  workflow_dispatch:
  
  # Automatically triggers the workflow on pull requests
  pull_request:
    branches:
      # Trigger only for pull requests targeting the 'main' branch
      - main
    paths:
      # Trigger only if changes are made in the frontend directory
      - starter/frontend/**

env:
  REPOSITORY: frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # Linting job: checks for linting issues in the codebase
  Linting:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (version 18) with caching
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      # Step 3: Install dependencies using npm
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      # Step 4: Run linting
      - name: Run Lint
        working-directory: starter/frontend
        run: FAIL_LINT=true npm run lint

  # Test job: runs the test suite to ensure code correctness
  Test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (version 18) with caching
      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      # Step 3: Install dependencies using npm
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      # Step 4: Run tests
      - name: Run Tests
        working-directory: starter/frontend
        run: CI=true npm test

  # Build job: builds the Docker image and runs the application
  Build:
    # Build runs only after Linting and Test jobs succeed
    needs: [Linting, Test]
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # Step 1: Checkout the repository
      - name: Check the Repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials for the current session
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Login to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build the Docker image and push it to ECR
      - name: Build & Push docker image with SHA
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        working-directory: starter/frontend
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  Deploy:
    needs: Build # This job runs only after the Build job completes successfully
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # Step 1: Checkout the repository to get the latest code for deployment
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials for the current session
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Login to Amazon ECR to access the Docker images
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Update kubeconfig to interact with the EKS cluster
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1

      # Step 5: Set the image tag in Kubernetes manifests using kustomize
      - name: Set image tag to newer version
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        working-directory: starter/frontend/k8s
        run: kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Step 6: Deploy the updated application to the EKS cluster
      - name: Deploy application to EKS cluster
        working-directory: starter/frontend/k8s
        run: kustomize build | kubectl apply -f -
